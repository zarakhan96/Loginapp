@using Loginapp.Services
@inject ToastService ToastService

<div class="toast-container" style="@(IsVisible ? "display:block" : "display:none")">
    <div class="toast @(ToastType)" role="alert">
        <div class="toast-header">
            <strong class="me-auto">@ToastType</strong>
            <button type="button" class="btn-close" @onclick="HideToast"></button>
        </div>
        <div class="toast-body">
            @Message
        </div>
    </div>
</div>
1
@code {
    private bool IsVisible { get; set; }
    private string Message { get; set; }
    private string ToastType { get; set; }
    private EventHandler<(string Message, string Type)> showHandler;
    private EventHandler hideHandler;

    protected override void OnInitialized()
    {
        // Define event handlers
        showHandler = (sender, args) =>
        {
            Message = args.Message;
            ToastType = args.Type;
            IsVisible = true;
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                await Task.Delay(5000);
                if (IsVisible)
                {
                    await InvokeAsync(() =>
                    {
                        IsVisible = false;
                        StateHasChanged();
                    });
                }
            });
        };

        hideHandler = (sender, args) =>
        {
            IsVisible = false;
            StateHasChanged();
        };

        // Subscribe to events
        ToastService.OnShow += showHandler;
        ToastService.OnHide += hideHandler;
    }

    private void HideToast()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        // Unsubscribe from events
        ToastService.OnShow -= showHandler;
        ToastService.OnHide -= hideHandler;
    }
}