@page "/weather"
@using Loginapp.Services
@inject UserSessionService SessionService
@inject NavigationManager Navigation

@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>
<p><strong>Session Role:</strong> @SessionService.Role</p> <!-- Debug output -->

<p>This component demonstrates showing data.</p>

@if (!sessionLoaded)
{
    <p><em>Checking permissions...</em></p>
}
else if (!isAuthorized)
{
    <p><em>Redirecting...</em></p>
}
else if (forecasts == null)
{
    <p><em>Loading weather data...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool sessionLoaded = false;
    private bool isAuthorized = false;
    private bool hasRenderedOnce = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRenderedOnce)
        {
            hasRenderedOnce = true;

            await SessionService.LoadSessionAsync();

            if (SessionService.Role != "Marketing & Sales")
            {
                Navigation.NavigateTo("/unauthorized", forceLoad: true);
                return;
            }

            isAuthorized = true;
            sessionLoaded = true;

            // Load weather only if user is authorized
            await LoadWeatherAsync();

            StateHasChanged(); // Trigger UI update
        }
    }

    private async Task LoadWeatherAsync()
    {
        await Task.Delay(500); // simulate delay
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
