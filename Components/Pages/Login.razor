@page "/login"
@rendermode InteractiveServer

@using Loginapp.Models
@using Loginapp.Services
@inject NavigationManager Navigation
@inject Loginapp.Data.AppDbContext DbContext
@inject EmailSystem EmailSender
@inject UserSessionService SessionService
@inject NetcodeHub.Packages.Components.Toast.ToastService toastService

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using NetcodeHub.Packages.Components.Toast

<EditForm Model="@loginModel" OnValidSubmit="@(IsCredentialsVerified ? HandleLogin : VerifyCredentials)">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-wrapper d-flex justify-content-center align-items-center">
        <div class="login-box text-center p-4">
            <h3 class="mb-4 text-white">Login</h3>

            @if (!IsCredentialsVerified)
            {
                <div class="form-group mb-3">
                    <InputText class="form-control hover-effect" @bind-Value="loginModel.Email" placeholder="Email Address" autocomplete="email" />
                </div>

                <div class="form-group mb-3">
                    <InputText class="form-control hover-effect" type="password" @bind-Value="loginModel.Password" placeholder="Password" autocomplete="current-password" />
                </div>

                <div class="form-group mb-3">
                    <InputSelect class="form-control hover-effect" @bind-Value="loginModel.Designation">
                        <option value="">-- Select Designation --</option>
                        <option>Human Resources (HR)</option>
                        <option>Marketing & Sales</option>
                        <option>Finance & Accounts</option>
                        <option>Production / Plant Operations</option>
                        <option>Engineering & Maintenance</option>
                        <option>Supply Chain & Procurement</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => loginModel.Designation)" />
                </div>
            }
            else
            {
                <div class="form-group mb-3">
                    <InputText class="form-control hover-effect" @bind-Value="loginModel.OTP" placeholder="Enter OTP" autocomplete="one-time-code" />
                </div>

                <button type="button" class="btn btn-secondary w-100 mb-2" @onclick="SendOTP" disabled="@IsOtpSent">
                    @((IsOtpSent && OtpCooldownSeconds > 0)
                        ? $"OTP Sent ({OtpCooldownMinutes}:{OtpCooldownRemainingSeconds:D2})"
                        : "Send OTP")
                </button>
            }

            <button type="submit" class="btn btn-light w-100 mb-3">@(IsCredentialsVerified ? "Login" : "Verify Credentials")</button>

            <p class="text-white">Don't have an account? <a href="/register" class="text-white">Register</a></p>
        </div>
    </div>
</EditForm>

<!-- Toast Component -->
<Toast @ref="toastService.ToastComponent"
       Duration="4000"
       IconClass="bi bi-check"
       Persist="true" />

<style>
    .hover-effect {
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
    }

        .hover-effect:hover {
            background-color: rgba(255, 255, 255, 0.5) !important;
            color: black !important;
        }

    .login-wrapper {
        height: 100vh;
        background: url("images/ffc.jpg") no-repeat center center fixed;
        background-size: cover;
    }

    .login-box {
        width: 370px;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 15px;
        backdrop-filter: blur(10px);
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    }

    .form-control {
        background-color: rgba(255, 255, 255, 0.3);
        border: none;
        color: white;
    }

        .form-control::placeholder {
            color: #eee;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.4);
            color: black;
            box-shadow: none;
        }
</style>

@code {
    private LoginModel loginModel = new();
    private bool IsCredentialsVerified = false;
    private bool IsOtpSent = false;
    private int OtpCooldownSeconds = 0;
    private System.Timers.Timer? cooldownTimer;

    private int OtpCooldownMinutes => OtpCooldownSeconds / 60;
    private int OtpCooldownRemainingSeconds => OtpCooldownSeconds % 60;

    private async Task VerifyCredentials()
    {
        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == loginModel.Email);

        if (user == null)
        {
            toastService.ShowErrorToast("Login Failed", "Invalid email.");
            return;
        }

        var hasher = new PasswordHasher<User>();
        var result = hasher.VerifyHashedPassword(user, user.Password, loginModel.Password);

        if (result != PasswordVerificationResult.Success)
        {
            toastService.ShowErrorToast("Login Failed", "Incorrect password.");
            return;
        }

        if (user.Designation != loginModel.Designation)
        {
            toastService.ShowErrorToast("Login Failed", "Designation mismatch.");
            return;
        }

        IsCredentialsVerified = true;
        toastService.ShowSuccessToast("Verified", "✅ Credentials verified. Please request OTP.");
    }

    private async Task SendOTP()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Email))
        {
            toastService.ShowErrorToast("Missing Info", "Enter your email before requesting OTP.");
            return;
        }

        string otp = new Random().Next(100000, 999999).ToString();

        var otpEntry = new OtpEntry
        {
            Email = loginModel.Email,
            OTP = otp,
            Expiry = DateTime.Now.AddMinutes(5)
        };

        DbContext.OtpEntries.Add(otpEntry);
        await DbContext.SaveChangesAsync();

        bool emailSent = await EmailSender.SendEmailAsync(
            loginModel.Email,
            "Your OTP for Login",
            $"<p>Your OTP is: <strong>{otp}</strong></p><p>This code will expire in 5 minutes.</p>"
        );

        if (emailSent)
        {
            toastService.ShowSuccessToast("OTP Sent", "✅ OTP sent to your email.");
            IsOtpSent = true;
            StartOtpCooldown();
        }
        else
        {
            toastService.ShowErrorToast("Send Failed", "❌ Failed to send OTP. Check your email settings.");
        }
    }

    private void StartOtpCooldown()
    {
        OtpCooldownSeconds = 300; // 5 minutes

        cooldownTimer?.Stop();
        cooldownTimer = new System.Timers.Timer(1000); // every 1 second

        cooldownTimer.Elapsed += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                OtpCooldownSeconds--;

                if (OtpCooldownSeconds <= 0)
                {
                    IsOtpSent = false;
                    cooldownTimer.Stop();
                }

                StateHasChanged();
            });
        };

        cooldownTimer.Start();
    }

    private async Task HandleLogin()
    {
        var otpRecord = await DbContext.OtpEntries
            .OrderByDescending(o => o.Id)
            .FirstOrDefaultAsync(o => o.Email == loginModel.Email && o.OTP == loginModel.OTP && o.Expiry > DateTime.Now);

        if (otpRecord == null)
        {
            toastService.ShowErrorToast("Login Failed", "Invalid or expired OTP.");
            return;
        }

        // Save session
        SessionService.LoggedInEmail = loginModel.Email;

        toastService.ShowSuccessToast("Login Successful", "✅ Logged in successfully.");

        string destinationUrl = loginModel.Designation switch
        {
            "Human Resources (HR)" => $"/hr/{Uri.EscapeDataString(loginModel.Email)}",
            "Marketing & Sales" => "/marketing",
            "Finance & Accounts" => "/finance",
            "Production / Plant Operations" => "/production",
            "Engineering & Maintenance" => "/engineering",
            "Supply Chain & Procurement" => "/supplychain",
            _ => "/"
        };

        Navigation.NavigateTo(destinationUrl, forceLoad: true);
    }
}